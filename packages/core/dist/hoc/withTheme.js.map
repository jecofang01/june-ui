{"version":3,"sources":["../../src/hoc/withTheme.js"],"names":["withTheme","mapper","BaseComponent","WithTheme","React","forwardRef","props","ref","theme","defaultProps","isDefaultTheme","defaultTheme","propsTheme","mappedTheme","mergedProps","process","env","NODE_ENV"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD;AAAA,SAAqE,UAACC,aAAD,EAAuC;AAC5H,QAAMC,SAAS,GAAGC,eAAMC,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR;AAAA,aACjC,6BAAC,+BAAD,QACG,YAA0C;AAAA,YAAzCC,KAAyC,uEAAP,EAAO;AACzC;AADyC,YAEjCC,YAFiC,GAEhBP,aAFgB,CAEjCO,YAFiC,EAGzC;;AACA,YAAMC,cAAc,GAAGD,YAAY,IAAIH,KAAK,CAACE,KAAN,KAAgBC,YAAY,CAACD,KAApE;AAEA,YAAMG,YAAY,GAAG,qBAAIF,YAAJ,EAAkB,OAAlB,EAA2B,EAA3B,CAArB;AACA,YAAMG,UAAU,GAAGN,KAAK,CAACE,KAAN,IAAe,CAACE,cAAhB,GAAiCJ,KAAK,CAACE,KAAvC,GAA+C,EAAlE;AACA,YAAMK,WAAW,GAAGZ,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,UAArC,GAAkDA,MAAM,CAACO,KAAD,CAAxD,GAAkE,EAAtF;AAEA,YAAMM,WAAW,GAAG,sBAAMH,YAAN,EAAoBE,WAApB,EAAiCL,KAAjC,EAAwCI,UAAxC,CAApB;AAEA,eAAO,6BAAC,aAAD,eAAmBN,KAAnB;AAA0B,UAAA,GAAG,EAAEC,GAA/B;AAAoC,UAAA,KAAK,EAAEO;AAA3C,WAAP;AACD,OAdH,CADiC;AAAA,KAAjB,CAAlB;;AAmBA,uCAAqBX,SAArB,EAAgCD,aAAhC;AAEA;;AACA,QAAIa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,aAAO,+BAAe,gCAAgBf,aAAhB,EAA+B,WAA/B,CAAf,EAA4DC,SAA5D,CAAP;AACD;AAED;;;AACA,WAAOA,SAAP;AACD,GA7BiB;AAAA,CAAlB;;eA+BeH,S","sourcesContent":["// @flow\nimport React, { type ComponentType } from 'react'\nimport { ThemeConsumer } from 'styled-components'\nimport hoistNonReactStatics from 'hoist-non-react-statics'\nimport { setDisplayName, wrapDisplayName } from 'recompose'\nimport get from 'lodash.get'\nimport merge from 'lodash.merge'\n\n/**\n * This function rewrite styled-component withTheme\n *\n * The defaultTheme, mappedTheme, contextTheme and propsTheme\n * are merged recursively. The merged value respect the right\n * most value\n *\n * @param {function} mapper map theme value to another\n */\nconst withTheme = (mapper?: ({ [key: string]: mixed }) => { [key: string]: mixed }) => (BaseComponent: ComponentType<any>) => {\n  const WithTheme = React.forwardRef((props, ref) => (\n    <ThemeConsumer>\n      {(theme: { [key: string]: mixed } = {}) => {\n        // $FlowFixMe\n        const { defaultProps } = BaseComponent\n        // $FlowFixMe\n        const isDefaultTheme = defaultProps && props.theme === defaultProps.theme\n\n        const defaultTheme = get(defaultProps, 'theme', {})\n        const propsTheme = props.theme && !isDefaultTheme ? props.theme : {}\n        const mappedTheme = mapper !== null && typeof mapper === 'function' ? mapper(theme) : {}\n\n        const mergedProps = merge(defaultTheme, mappedTheme, theme, propsTheme)\n\n        return <BaseComponent {...props} ref={ref} theme={mergedProps} />\n      }}\n    </ThemeConsumer>\n  ))\n\n  hoistNonReactStatics(WithTheme, BaseComponent)\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    return setDisplayName(wrapDisplayName(BaseComponent, 'withTheme'))(WithTheme)\n  }\n\n  /* istanbul ignore next */\n  return WithTheme\n}\n\nexport default withTheme\n"],"file":"withTheme.js"}